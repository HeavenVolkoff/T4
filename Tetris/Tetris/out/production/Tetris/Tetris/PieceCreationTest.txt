//Cria e define os controles
        Controls controles = new Controls();
        controles.setAction1Key(KeyInput.KEY_RETURN, inputManager);
        controles.initializeKeyPress(inputManager);

		//Material Def
		Material mat = new Material(assetManager, "Common/MatDefs/Misc/ShowNormals.j3md");

		//Normal
		Piece currentPiece0 = new Piece(0.1f, 0, -4, 1, mat, 0, 0);
		Piece currentPiece1 = new Piece(0.1f, 1, -2, 1, mat, 0, 0);
		Piece currentPiece2 = new Piece(0.1f, 2, +0, 1, mat, 0, 0);
		Piece currentPiece3 = new Piece(0.1f, 3, +2, 1, mat, 0, 0);
		Piece currentPiece4 = new Piece(0.1f, 4, +4, 1, mat, 0, 0);

		//rotate
		Piece currentPiece5 = new Piece(0.1f, 0, -4, 3, mat, (float)(Math.PI*0.5), 0);
		Piece currentPiece6 = new Piece(0.1f, 1, -2, 3, mat, (float)(Math.PI*0.5), 0);
		Piece currentPiece7 = new Piece(0.1f, 2, +0, 3, mat, (float)(Math.PI*0.5), 0);
		Piece currentPiece8 = new Piece(0.1f, 3, +2, 3, mat, (float)(Math.PI*0.5), 0);
		Piece currentPiece9 = new Piece(0.1f, 4, +4, 3, mat, (float)(Math.PI*0.5), 0);

		//Invert
		Piece currentPiece10 = new Piece(0.1f, 0, -4, -1, mat, 0, 1);
		Piece currentPiece11 = new Piece(0.1f, 1, -2, -1, mat, 0, 1);
		Piece currentPiece12 = new Piece(0.1f, 2, +0, -1, mat, 0, 1);
		Piece currentPiece13 = new Piece(0.1f, 3, +2, -1, mat, 0, 1);
		Piece currentPiece14 = new Piece(0.1f, 4, +4, -1, mat, 0, 1);

		//Invert and Rotate
		Piece currentPiece15 = new Piece(0.1f, 0, -4, -3, mat, (float)(Math.PI*0.5), 1);
		Piece currentPiece16 = new Piece(0.1f, 1, -2, -3, mat, (float)(Math.PI*0.5), 1);
		Piece currentPiece17 = new Piece(0.1f, 2, +0, -3, mat, (float)(Math.PI*0.5), 1);
		Piece currentPiece18 = new Piece(0.1f, 3, +2, -3, mat, (float)(Math.PI*0.5), 1);
		Piece currentPiece19 = new Piece(0.1f, 4, +4, -3, mat, (float)(Math.PI*0.5), 1);

		//Line 1
		Mesh mesh1 = new Mesh();
		mesh1.setMode(Mesh.Mode.Lines);
		mesh1.setBuffer(VertexBuffer.Type.Position, 3, new float[]{ -20, 3, 0, 20, 3, 0});
		mesh1.setBuffer(VertexBuffer.Type.Index, 2, new short[]{ 0, 1 });
		Geometry line1 = new Geometry("line", mesh1);
		line1.setMaterial(mat);
		rootNode.attachChild(line1);

		//Line 2
		Mesh mesh2 = new Mesh();
		mesh2.setMode(Mesh.Mode.Lines);
		mesh2.setBuffer(VertexBuffer.Type.Position, 3, new float[]{ -20, 1, 0, 20, 1, 0});
		mesh2.setBuffer(VertexBuffer.Type.Index, 2, new short[]{ 0, 1 });
		Geometry line2 = new Geometry("line", mesh2);
		line2.setMaterial(mat);
		rootNode.attachChild(line2);

		//Line 3
		Mesh mesh3 = new Mesh();
		mesh3.setMode(Mesh.Mode.Lines);
		mesh3.setBuffer(VertexBuffer.Type.Position, 3, new float[]{ -20, -1, 0, 20, -1, 0});
		mesh3.setBuffer(VertexBuffer.Type.Index, 2, new short[]{ 0, 1 });
		Geometry line3 = new Geometry("line", mesh3);
		line3.setMaterial(mat);
		rootNode.attachChild(line3);

		//Line 4
		Mesh mesh4 = new Mesh();
		mesh4.setMode(Mesh.Mode.Lines);
		mesh4.setBuffer(VertexBuffer.Type.Position, 3, new float[]{ -20, -3, 0, 20, -3, 0});
		mesh4.setBuffer(VertexBuffer.Type.Index, 2, new short[]{ 0, 1 });
		Geometry line4 = new Geometry("line", mesh4);
		line4.setMaterial(mat);
		rootNode.attachChild(line4);

		//Line v1
		Mesh meshv1 = new Mesh();
		meshv1.setMode(Mesh.Mode.Lines);
		meshv1.setBuffer(VertexBuffer.Type.Position, 3, new float[]{ 0, -20, 0, 0, 20, 0});
		meshv1.setBuffer(VertexBuffer.Type.Index, 2, new short[]{ 0, 1 });
		Geometry linev1 = new Geometry("line", meshv1);
		linev1.setMaterial(mat);
		rootNode.attachChild(linev1);

		//Line v2
		Mesh meshv2 = new Mesh();
		meshv2.setMode(Mesh.Mode.Lines);
		meshv2.setBuffer(VertexBuffer.Type.Position, 3, new float[]{ -2, -20, 0, -2, 20, 0});
		meshv2.setBuffer(VertexBuffer.Type.Index, 2, new short[]{ 0, 1 });
		Geometry linev2 = new Geometry("line", meshv2);
		linev2.setMaterial(mat);
		rootNode.attachChild(linev2);

		//Line v3
		Mesh meshv3 = new Mesh();
		meshv3.setMode(Mesh.Mode.Lines);
		meshv3.setBuffer(VertexBuffer.Type.Position, 3, new float[]{ -4, -20, 0, -4, 20, 0});
		meshv3.setBuffer(VertexBuffer.Type.Index, 2, new short[]{ 0, 1 });
		Geometry linev3 = new Geometry("line", meshv3);
		linev3.setMaterial(mat);
		rootNode.attachChild(linev3);

		//Line v4
		Mesh meshv4 = new Mesh();
		meshv4.setMode(Mesh.Mode.Lines);
		meshv4.setBuffer(VertexBuffer.Type.Position, 3, new float[]{ 2, -20, 0, 2, 20, 0});
		meshv4.setBuffer(VertexBuffer.Type.Index, 2, new short[]{ 0, 1 });
		Geometry linev4 = new Geometry("line", meshv4);
		linev4.setMaterial(mat);
		rootNode.attachChild(linev4);

		//Line v5
		Mesh meshv5 = new Mesh();
		meshv5.setMode(Mesh.Mode.Lines);
		meshv5.setBuffer(VertexBuffer.Type.Position, 3, new float[]{ 4, -20, 0, 4, 20, 0});
		meshv5.setBuffer(VertexBuffer.Type.Index, 2, new short[]{ 0, 1 });
		Geometry linev5 = new Geometry("line", meshv5);
		linev5.setMaterial(mat);
		rootNode.attachChild(linev5);

		//Normal
		rootNode.attachChild(currentPiece0.rotationPivot);
		rootNode.attachChild(currentPiece1.rotationPivot);
		rootNode.attachChild(currentPiece2.rotationPivot);
		rootNode.attachChild(currentPiece3.rotationPivot);
		rootNode.attachChild(currentPiece4.rotationPivot);

		//rotate
		rootNode.attachChild(currentPiece5.rotationPivot);
		rootNode.attachChild(currentPiece6.rotationPivot);
		rootNode.attachChild(currentPiece7.rotationPivot);
		rootNode.attachChild(currentPiece8.rotationPivot);
		rootNode.attachChild(currentPiece9.rotationPivot);

		//Invert
		rootNode.attachChild(currentPiece10.rotationPivot);
		rootNode.attachChild(currentPiece11.rotationPivot);
		rootNode.attachChild(currentPiece12.rotationPivot);
		rootNode.attachChild(currentPiece13.rotationPivot);
		rootNode.attachChild(currentPiece14.rotationPivot);

		//Invert and Rotate
		rootNode.attachChild(currentPiece15.rotationPivot);
		rootNode.attachChild(currentPiece16.rotationPivot);
		rootNode.attachChild(currentPiece17.rotationPivot);
		rootNode.attachChild(currentPiece18.rotationPivot);
		rootNode.attachChild(currentPiece19.rotationPivot);

		//Light
		DirectionalLight sun = new DirectionalLight();
		sun.setDirection(new Vector3f(0,1,-5).normalizeLocal());
		sun.setColor(ColorRGBA.White);
		rootNode.addLight(sun);

		//Fixed Cam
		//flyCam.setEnabled(false);